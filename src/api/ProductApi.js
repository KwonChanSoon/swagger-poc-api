/**
 * DB-LOCK-POC
 * 라라벨에 스웨거 적용 테스트를 위한 프로젝트
 *
 * OpenAPI spec version: 1
 * Contact: juwonkim@me.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorDto from '../model/ErrorDto';
import NewProductRequest from '../model/NewProductRequest';
import ProductDto from '../model/ProductDto';
import ProductListResponse from '../model/ProductListResponse';

/**
* Product service.
* @module api/ProductApi
* @version 1
*/
export default class ProductApi {

    /**
    * Constructs a new ProductApi. 
    * @alias module:api/ProductApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProduct operation.
     * @callback module:api/ProductApi~createProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 새 상품을 등록합니다.
     * @param {String} authorization 액세스 토큰
     * @param {module:model/NewProductRequest} body 
     * @param {module:api/ProductApi~createProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductDto}
     */
    createProduct(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createProduct");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createProduct");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ProductDto;

      return this.apiClient.callApi(
        '/v1/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProduct operation.
     * @callback module:api/ProductApi~deleteProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 상품을 삭제합니다.
     * @param {String} authorization 액세스 토큰
     * @param {Number} productId 
     * @param {module:api/ProductApi~deleteProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProduct(authorization, productId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteProduct");
      }

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProduct");
      }


      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/products/{productId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProducts operation.
     * @callback module:api/ProductApi~listProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 상품 목록을 조회합니다.
     * @param {String} authorization 액세스 토큰
     * @param {Object} opts Optional parameters
     * @param {String} opts.q 검색어
     * @param {Number} opts.priceFrom 최소 가격
     * @param {Number} opts.priceTo 최대 가격
     * @param {module:model/String} opts.sortKey 정렬 필드 (default to CREATED_AT)
     * @param {module:model/String} opts.sortDirection 정렬 방향 (default to DESC)
     * @param {Number} opts.page 페이지 (default to 1)
     * @param {Number} opts.size 페이지당 표시할 아이템 개수 (default to 10)
     * @param {module:api/ProductApi~listProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductListResponse}
     */
    listProducts(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listProducts");
      }


      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'price_from': opts['priceFrom'],
        'price_to': opts['priceTo'],
        'sort_key': opts['sortKey'],
        'sort_direction': opts['sortDirection'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductListResponse;

      return this.apiClient.callApi(
        '/v1/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProduct operation.
     * @callback module:api/ProductApi~updateProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 상품을 수정합니다 (ON PURPOSE 10 SEC DELAY TO TEST PESSIMISTIC/OPTIMISTIC DB LOCK).
     * @param {String} authorization 액세스 토큰
     * @param {Number} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/NewProductRequest} opts.body 
     * @param {module:api/ProductApi~updateProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductDto}
     */
    updateProduct(authorization, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateProduct");
      }

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProduct");
      }


      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ProductDto;

      return this.apiClient.callApi(
        '/v1/products/{productId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
