/**
 * DB-LOCK-POC
 * 라라벨에 스웨거 적용 테스트를 위한 프로젝트
 *
 * OpenAPI spec version: 1
 * Contact: juwonkim@me.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorDto from '../model/ErrorDto';
import NewReviewRequest from '../model/NewReviewRequest';
import ReviewDto from '../model/ReviewDto';
import ReviewListResponse from '../model/ReviewListResponse';

/**
* Review service.
* @module api/ReviewApi
* @version 1
*/
export default class ReviewApi {

    /**
    * Constructs a new ReviewApi. 
    * @alias module:api/ReviewApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createReview operation.
     * @callback module:api/ReviewApi~createReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 새 리뷰를 등록합니다.
     * @param {String} authorization 액세스 토큰
     * @param {Number} productId 
     * @param {module:model/NewReviewRequest} body 
     * @param {module:api/ReviewApi~createReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReviewDto}
     */
    createReview(authorization, productId, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createReview");
      }

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling createReview");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createReview");
      }


      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ReviewDto;

      return this.apiClient.callApi(
        '/v1/products/{productId}/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReview operation.
     * @callback module:api/ReviewApi~deleteReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 리뷰를 삭제합니다.
     * @param {String} authorization 액세스 토큰
     * @param {Number} productId 
     * @param {Number} reviewId 
     * @param {module:api/ReviewApi~deleteReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReview(authorization, productId, reviewId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteReview");
      }

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteReview");
      }

      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling deleteReview");
      }


      let pathParams = {
        'productId': productId,
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/products/{productId}/reviews/{reviewId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listReviews operation.
     * @callback module:api/ReviewApi~listReviewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 상품에 대한 리뷰 목록을 조회합니다.
     * @param {String} authorization 액세스 토큰
     * @param {Number} productId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.q 검색어
     * @param {Number} opts.userId 작성자 ID
     * @param {module:model/String} opts.sortKey 정렬 필드 (default to CREATED_AT)
     * @param {module:model/String} opts.sortDirection 정렬 방향 (default to DESC)
     * @param {Number} opts.page 페이지 (default to 1)
     * @param {Number} opts.size 페이지당 표시할 아이템 개수 (default to 10)
     * @param {module:api/ReviewApi~listReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReviewListResponse}
     */
    listReviews(authorization, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listReviews");
      }

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling listReviews");
      }


      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'q': opts['q'],
        'user_id': opts['userId'],
        'sort_key': opts['sortKey'],
        'sort_direction': opts['sortDirection'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReviewListResponse;

      return this.apiClient.callApi(
        '/v1/products/{productId}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReview operation.
     * @callback module:api/ReviewApi~updateReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 리뷰를 수정합니다 (ON PURPOSE 10 SEC DELAY TO TEST PESSIMISTIC/OPTIMISTIC DB LOCK).
     * @param {String} authorization 액세스 토큰
     * @param {Number} productId 
     * @param {Number} reviewId 
     * @param {Object} opts Optional parameters
     * @param {module:model/NewReviewRequest} opts.body 
     * @param {module:api/ReviewApi~updateReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReviewDto}
     */
    updateReview(authorization, productId, reviewId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateReview");
      }

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling updateReview");
      }

      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling updateReview");
      }


      let pathParams = {
        'productId': productId,
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ReviewDto;

      return this.apiClient.callApi(
        '/v1/products/{productId}/reviews/{reviewId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
