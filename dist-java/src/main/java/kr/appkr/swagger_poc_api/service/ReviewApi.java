/*
 * DB-LOCK-POC
 * 라라벨에 스웨거 적용 테스트를 위한 프로젝트
 *
 * OpenAPI spec version: 1
 * Contact: juwonkim@me.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package kr.appkr.swagger_poc_api.service;

import kr.appkr.swagger_poc_api.ApiCallback;
import kr.appkr.swagger_poc_api.ApiClient;
import kr.appkr.swagger_poc_api.ApiException;
import kr.appkr.swagger_poc_api.ApiResponse;
import kr.appkr.swagger_poc_api.Configuration;
import kr.appkr.swagger_poc_api.Pair;
import kr.appkr.swagger_poc_api.ProgressRequestBody;
import kr.appkr.swagger_poc_api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import kr.appkr.swagger_poc_api.model.ErrorDto;
import kr.appkr.swagger_poc_api.model.NewReviewRequest;
import kr.appkr.swagger_poc_api.model.ReviewDto;
import kr.appkr.swagger_poc_api.model.ReviewListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReviewApi {
    private ApiClient apiClient;

    public ReviewApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReviewApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createReview
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createReviewCall(String authorization, Long productId, NewReviewRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/products/{productId}/reviews"
            .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createReviewValidateBeforeCall(String authorization, Long productId, NewReviewRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createReview(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling createReview(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createReview(Async)");
        }
        

        com.squareup.okhttp.Call call = createReviewCall(authorization, productId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 새 리뷰를 등록합니다.
     * 
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param body  (required)
     * @return ReviewDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReviewDto createReview(String authorization, Long productId, NewReviewRequest body) throws ApiException {
        ApiResponse<ReviewDto> resp = createReviewWithHttpInfo(authorization, productId, body);
        return resp.getData();
    }

    /**
     * 새 리뷰를 등록합니다.
     * 
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ReviewDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReviewDto> createReviewWithHttpInfo(String authorization, Long productId, NewReviewRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createReviewValidateBeforeCall(authorization, productId, body, null, null);
        Type localVarReturnType = new TypeToken<ReviewDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 새 리뷰를 등록합니다. (asynchronously)
     * 
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createReviewAsync(String authorization, Long productId, NewReviewRequest body, final ApiCallback<ReviewDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createReviewValidateBeforeCall(authorization, productId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReviewDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteReview
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param reviewId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReviewCall(String authorization, Long productId, Long reviewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/products/{productId}/reviews/{reviewId}"
            .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "reviewId" + "\\}", apiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReviewValidateBeforeCall(String authorization, Long productId, Long reviewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteReview(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling deleteReview(Async)");
        }
        
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling deleteReview(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReviewCall(authorization, productId, reviewId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 리뷰를 삭제합니다.
     * 
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param reviewId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReview(String authorization, Long productId, Long reviewId) throws ApiException {
        deleteReviewWithHttpInfo(authorization, productId, reviewId);
    }

    /**
     * 리뷰를 삭제합니다.
     * 
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param reviewId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReviewWithHttpInfo(String authorization, Long productId, Long reviewId) throws ApiException {
        com.squareup.okhttp.Call call = deleteReviewValidateBeforeCall(authorization, productId, reviewId, null, null);
        return apiClient.execute(call);
    }

    /**
     * 리뷰를 삭제합니다. (asynchronously)
     * 
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param reviewId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReviewAsync(String authorization, Long productId, Long reviewId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReviewValidateBeforeCall(authorization, productId, reviewId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listReviews
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param q 검색어 (optional)
     * @param userId 작성자 ID (optional)
     * @param sortKey 정렬 필드 (optional, default to CREATED_AT)
     * @param sortDirection 정렬 방향 (optional, default to DESC)
     * @param page 페이지 (optional, default to 1)
     * @param size 페이지당 표시할 아이템 개수 (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listReviewsCall(String authorization, Long productId, String q, Long userId, String sortKey, String sortDirection, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/products/{productId}/reviews"
            .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (sortKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_key", sortKey));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listReviewsValidateBeforeCall(String authorization, Long productId, String q, Long userId, String sortKey, String sortDirection, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listReviews(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling listReviews(Async)");
        }
        

        com.squareup.okhttp.Call call = listReviewsCall(authorization, productId, q, userId, sortKey, sortDirection, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 상품에 대한 리뷰 목록을 조회합니다.
     * 
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param q 검색어 (optional)
     * @param userId 작성자 ID (optional)
     * @param sortKey 정렬 필드 (optional, default to CREATED_AT)
     * @param sortDirection 정렬 방향 (optional, default to DESC)
     * @param page 페이지 (optional, default to 1)
     * @param size 페이지당 표시할 아이템 개수 (optional, default to 10)
     * @return ReviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReviewListResponse listReviews(String authorization, Long productId, String q, Long userId, String sortKey, String sortDirection, Integer page, Integer size) throws ApiException {
        ApiResponse<ReviewListResponse> resp = listReviewsWithHttpInfo(authorization, productId, q, userId, sortKey, sortDirection, page, size);
        return resp.getData();
    }

    /**
     * 상품에 대한 리뷰 목록을 조회합니다.
     * 
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param q 검색어 (optional)
     * @param userId 작성자 ID (optional)
     * @param sortKey 정렬 필드 (optional, default to CREATED_AT)
     * @param sortDirection 정렬 방향 (optional, default to DESC)
     * @param page 페이지 (optional, default to 1)
     * @param size 페이지당 표시할 아이템 개수 (optional, default to 10)
     * @return ApiResponse&lt;ReviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReviewListResponse> listReviewsWithHttpInfo(String authorization, Long productId, String q, Long userId, String sortKey, String sortDirection, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = listReviewsValidateBeforeCall(authorization, productId, q, userId, sortKey, sortDirection, page, size, null, null);
        Type localVarReturnType = new TypeToken<ReviewListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 상품에 대한 리뷰 목록을 조회합니다. (asynchronously)
     * 
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param q 검색어 (optional)
     * @param userId 작성자 ID (optional)
     * @param sortKey 정렬 필드 (optional, default to CREATED_AT)
     * @param sortDirection 정렬 방향 (optional, default to DESC)
     * @param page 페이지 (optional, default to 1)
     * @param size 페이지당 표시할 아이템 개수 (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listReviewsAsync(String authorization, Long productId, String q, Long userId, String sortKey, String sortDirection, Integer page, Integer size, final ApiCallback<ReviewListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listReviewsValidateBeforeCall(authorization, productId, q, userId, sortKey, sortDirection, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReviewListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateReview
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param reviewId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateReviewCall(String authorization, Long productId, Long reviewId, NewReviewRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/products/{productId}/reviews/{reviewId}"
            .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "reviewId" + "\\}", apiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateReviewValidateBeforeCall(String authorization, Long productId, Long reviewId, NewReviewRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateReview(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling updateReview(Async)");
        }
        
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling updateReview(Async)");
        }
        

        com.squareup.okhttp.Call call = updateReviewCall(authorization, productId, reviewId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 리뷰를 수정합니다 (ON PURPOSE 10 SEC DELAY TO TEST PESSIMISTIC/OPTIMISTIC DB LOCK).
     * 
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param reviewId  (required)
     * @param body  (optional)
     * @return ReviewDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReviewDto updateReview(String authorization, Long productId, Long reviewId, NewReviewRequest body) throws ApiException {
        ApiResponse<ReviewDto> resp = updateReviewWithHttpInfo(authorization, productId, reviewId, body);
        return resp.getData();
    }

    /**
     * 리뷰를 수정합니다 (ON PURPOSE 10 SEC DELAY TO TEST PESSIMISTIC/OPTIMISTIC DB LOCK).
     * 
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param reviewId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ReviewDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReviewDto> updateReviewWithHttpInfo(String authorization, Long productId, Long reviewId, NewReviewRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateReviewValidateBeforeCall(authorization, productId, reviewId, body, null, null);
        Type localVarReturnType = new TypeToken<ReviewDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 리뷰를 수정합니다 (ON PURPOSE 10 SEC DELAY TO TEST PESSIMISTIC/OPTIMISTIC DB LOCK). (asynchronously)
     * 
     * @param authorization 액세스 토큰 (required)
     * @param productId  (required)
     * @param reviewId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateReviewAsync(String authorization, Long productId, Long reviewId, NewReviewRequest body, final ApiCallback<ReviewDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateReviewValidateBeforeCall(authorization, productId, reviewId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReviewDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
